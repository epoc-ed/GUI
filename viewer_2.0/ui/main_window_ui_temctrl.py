from PySide6.QtWidgets import (QHBoxLayout, QLabel, QLineEdit, QButtonGroup, 
                               QRadioButton, QPushButton, QCheckBox)

class ToggleButton(QPushButton):
    def __init__(self, label, window):
        super().__init__(label, window)
        self.started = False

class Ui_TEMctrl(object):
    def setupUI_temctrl(self, MainWindow):
        self.hbox_mag = QHBoxLayout()
        magn_label = QLabel("Magnification:", self)
        dist_label = QLabel("Distance:", self)
        self.input_magnification = QLineEdit(self)
        self.input_magnification.setText("")
        self.input_magnification.setReadOnly(True)
        self.input_det_distance = QLineEdit(self)
        self.input_det_distance.setText("")
        self.input_det_distance.setReadOnly(True)
        self.scale_checkbox = QCheckBox("scale", self)
        self.scale_checkbox.setChecked(False)
        self.scale_checkbox.setEnabled(False)
        self.hbox_mag.addWidget(magn_label, 1)
        self.hbox_mag.addWidget(self.input_magnification, 1)
        self.hbox_mag.addWidget(dist_label, 1)
        self.hbox_mag.addWidget(self.input_det_distance, 1)
        self.hbox_mag.addWidget(self.scale_checkbox, 1)
        
        self.hbox_rot = QHBoxLayout()
        rot_label = QLabel("Rotation Speed:", self)
        self.rb_speeds = QButtonGroup()
        self.rb_speed_05 = QRadioButton('0.5 deg/s', self)
        self.rb_speed_1 = QRadioButton('1 deg/s', self)
        self.rb_speed_2 = QRadioButton('2 deg/s', self)
        self.rb_speed_10 = QRadioButton('10 deg/s', self)
        self.rb_speeds.addButton(self.rb_speed_05, 3)
        self.rb_speeds.addButton(self.rb_speed_1, 1)
        self.rb_speeds.addButton(self.rb_speed_2, 2)
        self.rb_speeds.addButton(self.rb_speed_10, 0)
        self.rb_speeds.button(1).setChecked(True)
        # self.rb_speeds.buttonClicked.connect(self.toggle_rb_speeds)
        self.hbox_rot.addWidget(rot_label, 1)
        for i in self.rb_speeds.buttons():
            self.hbox_rot.addWidget(i, 1)
            i.setEnabled(False)        

        self.hbox_move = QHBoxLayout()
        move_label = QLabel("Stage Ctrl:", self)
        self.movestages = QButtonGroup()
        self.movex10ump = QPushButton('+10 µm', self)
        self.movex10umn = QPushButton('-10 µm', self)
        self.move10degp = QPushButton('+10 deg', self)
        self.move10degn = QPushButton('-10 deg', self)
        self.move0deg = QPushButton('0 deg', self)
        self.movestages.addButton(self.movex10ump, 2)
        self.movestages.addButton(self.movex10umn, -2)
        self.movestages.addButton(self.move10degp, 10)
        self.movestages.addButton(self.move10degn, -10)
        self.movestages.addButton(self.move0deg, 0)
        # self.movex10ump.clicked.connect(lambda: self.control.send.emit("stage.SetXRel(10000)"))
        # self.movex10umn.clicked.connect(lambda: self.control.send.emit("stage.SetXRel(-10000)"))
        # self.move10degp.clicked.connect(lambda: self.control.send.emit("stage.SetTXRel(10)"))
        # self.move10degn.clicked.connect(lambda: self.control.send.emit("stage.SetTXRel(-10)"))
        # self.move0deg.clicked.connect(lambda: self.control.send.emit("stage.SetTiltXAngle(0)"))
        self.hbox_move.addWidget(move_label, 1)
        for i in self.movestages.buttons():
            self.hbox_move.addWidget(i, 1)
            i.setEnabled(False)

        self.exit_button = QPushButton("Exit", self)
        self.connecttem_button = ToggleButton('Connect to TEM', self)
        self.gettem_button = QPushButton("Get TEM status", self)
        self.gettem_checkbox = QCheckBox("recording", self)
        self.gettem_checkbox.setChecked(False)
        self.gettem_checkbox.setEnabled(False)
        self.centering_button = ToggleButton("Click-on-Centering", self)
        self.rotation_button = ToggleButton("Start Rotation (+60)", self)
        self.gettem_button.setEnabled(False)
        self.centering_button.setEnabled(False)
        self.rotation_button.setEnabled(False)
        # self.gettem_button.clicked.connect(self.do_exit)
        gettem_layout = QHBoxLayout()
        gettem_layout.addWidget(self.gettem_button)
        gettem_layout.addWidget(self.gettem_checkbox)
        self.bottom_layout = QHBoxLayout()
        self.bottom_layout.addWidget(self.connecttem_button)
        self.bottom_layout.addLayout(gettem_layout)
        self.bottom_layout.addWidget(self.centering_button)
        self.bottom_layout.addWidget(self.rotation_button)
        self.bottom_layout.addWidget(self.exit_button)

        self.focus_layout = QHBoxLayout()
        self.btnBeamFocus = ToggleButton("Beam Gaussian Fit", self)
        self.btnBeamSweep = QPushButton('Start Focus-sweeping', self)
        self.btnBeamSweep.setEnabled(False)
        self.focus_layout.addWidget(self.btnBeamFocus)
        self.focus_layout.addWidget(self.btnBeamSweep)
        
        